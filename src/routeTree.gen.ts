/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as AppCharactersIndexRouteImport } from './pages/_app/_characters/index'
import { Route as AppLocationsLocationsRouteImport } from './pages/_app/_locations/locations'
import { Route as AppEpisodesEpisodesRouteImport } from './pages/_app/_episodes/episodes'
import { Route as AppCharactersCharacterCharacterIdRouteImport } from './pages/_app/_characters/character/$characterId'

const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppCharactersIndexRoute = AppCharactersIndexRouteImport.update({
  id: '/_characters/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLocationsLocationsRoute = AppLocationsLocationsRouteImport.update({
  id: '/_locations/locations',
  path: '/locations',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppEpisodesEpisodesRoute = AppEpisodesEpisodesRouteImport.update({
  id: '/_episodes/episodes',
  path: '/episodes',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppCharactersCharacterCharacterIdRoute =
  AppCharactersCharacterCharacterIdRouteImport.update({
    id: '/_characters/character/$characterId',
    path: '/character/$characterId',
    getParentRoute: () => AppLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/episodes': typeof AppEpisodesEpisodesRoute
  '/locations': typeof AppLocationsLocationsRoute
  '/': typeof AppCharactersIndexRoute
  '/character/$characterId': typeof AppCharactersCharacterCharacterIdRoute
}
export interface FileRoutesByTo {
  '/episodes': typeof AppEpisodesEpisodesRoute
  '/locations': typeof AppLocationsLocationsRoute
  '/': typeof AppCharactersIndexRoute
  '/character/$characterId': typeof AppCharactersCharacterCharacterIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppLayoutRouteWithChildren
  '/_app/_episodes/episodes': typeof AppEpisodesEpisodesRoute
  '/_app/_locations/locations': typeof AppLocationsLocationsRoute
  '/_app/_characters/': typeof AppCharactersIndexRoute
  '/_app/_characters/character/$characterId': typeof AppCharactersCharacterCharacterIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/episodes' | '/locations' | '/' | '/character/$characterId'
  fileRoutesByTo: FileRoutesByTo
  to: '/episodes' | '/locations' | '/' | '/character/$characterId'
  id:
    | '__root__'
    | '/_app'
    | '/_app/_episodes/episodes'
    | '/_app/_locations/locations'
    | '/_app/_characters/'
    | '/_app/_characters/character/$characterId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/_characters/': {
      id: '/_app/_characters/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppCharactersIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/_locations/locations': {
      id: '/_app/_locations/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof AppLocationsLocationsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/_episodes/episodes': {
      id: '/_app/_episodes/episodes'
      path: '/episodes'
      fullPath: '/episodes'
      preLoaderRoute: typeof AppEpisodesEpisodesRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/_characters/character/$characterId': {
      id: '/_app/_characters/character/$characterId'
      path: '/character/$characterId'
      fullPath: '/character/$characterId'
      preLoaderRoute: typeof AppCharactersCharacterCharacterIdRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppEpisodesEpisodesRoute: typeof AppEpisodesEpisodesRoute
  AppLocationsLocationsRoute: typeof AppLocationsLocationsRoute
  AppCharactersIndexRoute: typeof AppCharactersIndexRoute
  AppCharactersCharacterCharacterIdRoute: typeof AppCharactersCharacterCharacterIdRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppEpisodesEpisodesRoute: AppEpisodesEpisodesRoute,
  AppLocationsLocationsRoute: AppLocationsLocationsRoute,
  AppCharactersIndexRoute: AppCharactersIndexRoute,
  AppCharactersCharacterCharacterIdRoute:
    AppCharactersCharacterCharacterIdRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
